// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String // ! should maybe be Int?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//? Above is the default schema generated by NextAuth.js

model User {
  id               String      @id @default(cuid())
  name             String?
  email            String?     @unique
  emailVerified    DateTime? //? default by NextAuth
  image            String? //? default by NextAuth
  username         String?     @unique
  premium          Boolean     @default(false)
  completedProfile Boolean     @default(false)
  profession       String?
  portfolio        String?
  about            String?     @default("ðŸ—½ New to XProfile")
  pronouns         String?
  skills           String[]
  interests        String[]
  Account          Account[]
  Session          Session[]
  Socials          Socials[]
  Links            Links[]
  Followers        Followers[]
  Following        Following[]
  Projects         Projects[]
}

model Socials {
  id     String @id @default(cuid())
  userId String
  order  Int
  type   String
  handle String
  clicks Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Links {
  id     String @id @default(cuid())
  title  String
  url    String
  order  Int
  clicks Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Followers {
  id             String   @id @default(cuid())
  follower_count Int      @default(0)
  followers      String[]
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model Following {
  id              String   @id @default(cuid())
  following_count Int      @default(0)
  following       String[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

model Projects {
  id          String @id @default(cuid())
  title       String
  description String
  image       String
  url         String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}
